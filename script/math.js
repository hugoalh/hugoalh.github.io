/*! JavaScript Macro - Math  @hugoalh  0.3.50 */
Math.negativeabsolute=function(n){if(typeof n=="number"){if(n>=0){n=0-n};return n}else{console.error("Math.negativeabsolute: \""+JSON.stringify(n)+"\" is not a number!");return undefined}};Math.nabs=Math.negativeabsolute;Number.prototype.negativeabsolute=function(){return Math.negativeabsolute(this.valueOf())};Number.prototype.nabs=Number.prototype.negativeabsolute;Math.addition=function(){let List=[];if(Array.isArray(arguments[0])==!0){List=arguments[0]}else{for(let index=0;index<arguments.length;index++){List.push(arguments[index])}};if(List.length==0){console.error("Math.addition: No input!");return undefined};let Invalid=!1;for(let index=0;index<List.length;index++){if(typeof List[index]!="number"){console.error("Math.addition: \""+JSON.stringify(List[index])+"\" is not a number!");Invalid=!0}};if(Invalid==!0){return undefined};let Total=List[0];if(List.length>1){for(let index=1;index<List.length;index++){Total=Total+List[index]}};return Total};Math.add=Math.addition;Math.multiplication=function(){let List=[];if(Array.isArray(arguments[0])==!0){List=arguments[0]}else{for(let index=0;index<arguments.length;index++){List.push(arguments[index])}};if(List.length==0){console.error("Math.multiplication: No input!");return undefined};let Invalid=!1;for(let index=0;index<List.length;index++){if(typeof List[index]!="number"){console.error("Math.multiplication: \""+JSON.stringify(List[index])+"\" is not a number!");Invalid=!0}};if(Invalid==!0){return undefined};let Total=List[0];if(List.length>1){for(let index=1;index<List.length;index++){Total=Total*List[index]}};return Total};Math.multiply=Math.multiplication;Math.root=function(Base,Root){if(typeof Base=="number"&&typeof Root=="number"){return Math.pow(Base,(1/Root))}else{if(typeof Base!="number"){console.error("Math.root: Base \""+JSON.stringify(Base)+"\" is not a number!")};if(typeof Root!="number"){console.error("Math.root: Root \""+JSON.stringify(Root)+"\" is not a number!")};return undefined}};Math.greatestcommondivisor=function(){let List=[];if(Array.isArray(arguments[0])==!0){List=arguments[0]}else{for(let index=0;index<arguments.length;index++){List.push(arguments[index])}};if(List.length==0){console.error("Math.greatestcommondivisor: No input!");return undefined};let Invalid=!1;for(let index=0;index<List.length;index++){if(typeof List[index]!="number"){console.error("Math.greatestcommondivisor: \""+JSON.stringify(List[index])+"\" is not a number!");Invalid=!0}};if(Invalid==!0){return undefined};if(List.length==2){if(List[1]==0){return List[0]}else{return Math.gcd(List[1],List[0]%List[1])}}else if(List.length>2){var result=Math.gcd(List[0],List[1]);for(let index=2;index<List.length;index++){result=Math.gcd(result,List[index])};return result}else{return List[0]}};Math.gcd=Math.greatestcommondivisor;Math.greatestcommonfactor=Math.greatestcommondivisor;Math.gcf=Math.greatestcommondivisor;Math.highestcommonfactor=Math.greatestcommondivisor;Math.hcf=Math.greatestcommondivisor;Math.greatestcommonmeasure=Math.greatestcommondivisor;Math.gcm=Math.greatestcommondivisor;Math.highestcommondivisor=Math.greatestcommondivisor;Math.hcd=Math.greatestcommondivisor;Math.leastcommonmultiple=function(){let List=[];if(Array.isArray(arguments[0])==!0){List=arguments[0]}else{for(let index=0;index<arguments.length;index++){List.push(arguments[index])}};if(List.length==0){console.error("Math.leastcommonmultiple: No input!");return undefined};let Invalid=!1;for(let index=0;index<List.length;index++){if(typeof List[index]!="number"){console.error("Math.leastcommonmultiple: \""+JSON.stringify(List[index])+"\" is not a number!");Invalid=!0}};if(Invalid==!0){return undefined};if(List.length>1){return(Math.abs(Math.multiplication(List))/Math.gcd(List))}else{return List[0]}};Math.lowestcommonmultiple=Math.leastcommonmultiple;Math.lcm=Math.leastcommonmultiple;Math.smallestcommonmultiple=Math.leastcommonmultiple;Math.scm=Math.leastcommonmultiple;Math.hypotenuse=function(A,B,Query="h"){if(typeof A=="number"&&typeof B=="number"){switch(Query){case "h":case "H":return Math.sqrt((A*A)+(B*B));break;case "c":case "C":return Math.sqrt((A*A)-(B*B));break;default:console.error("Math.hypotenuse: Invalid query \""+JSON.stringify(Query)+"\"!");return undefined;break}}else{if(typeof A!="number"){console.error("Math.hypotenuse: \""+JSON.stringify(A)+"\" is not a number!")};if(typeof B!="number"){console.error("Math.hypotenuse: \""+JSON.stringify(B)+"\" is not a number!")};return undefined}};Math.antihypotenuse=function(A,B){return Math.hypotenuse(A,B,"c")};Math.xhypotenuse=Math.antihypotenuse;Math.factorial=function(n){if(Number.isInteger(n)==!0&&n>0){let Total=n;while(n>1){n--;Total=Total*n};return Total}else if(Number.isInteger(n)==!0&&n==0){return 1}else{console.error("Math.factorial: \""+JSON.stringify(n)+"\" is not a positive integer number!");return undefined}};Math.factor=Math.factorial;Math.fact=Math.factorial;Number.prototype.factorial=function(){return Math.factorial(this.valueOf())};Number.prototype.factor=Number.prototype.factorial;Number.prototype.fact=Number.prototype.factorial;Math.permutation=function(n,k){if(Number.isInteger(n)==!0&&Number.isInteger(k)==!0&&n>=0&&k>=0&&n>=k){return(Math.factorial(n)/Math.factorial(n-k))}else{if(Number.isInteger(n)!=!0||n<0){console.error("Math.permutation: \""+JSON.stringify(n)+"\" is not a positive integer number!")};if(Number.isInteger(k)!=!0||k<0){console.error("Math.permutation: \""+JSON.stringify(k)+"\" is not a positive integer number!")};if(n<k){console.error("Math.permutation: Illogical permutation!")};return undefined}};Math.nPr=Math.permutation;Math.permute=Math.permutation;Math.cumulativepermutation=function(n){if(Number.isInteger(n)==!0&&n>=0){let Total=0;for(let index=1;index<=n;index++){Total=Total+Math.permutation(n,index)};return Total}else{console.error("Math.cumulativepermutation: \""+JSON.stringify(n)+"\" is not a positive integer number!");return undefined}};Math.cumpermute=Math.cumulativepermutation;Number.prototype.cumulativepermutation=function(){return Math.cumulativepermutation(this.valueOf())};Number.prototype.cumpermute=Number.prototype.cumulativepermutation;Math.combination=function(n,k){if(Number.isInteger(n)==!0&&Number.isInteger(k)==!0&&n>=0&&k>=0&&n>=k){return(Math.factorial(n)/(Math.factorial(k)*Math.factorial(n-k)))}else{if(Number.isInteger(n)!=!0||n<0){console.error("Math.permutation: \""+JSON.stringify(n)+"\" is not a positive integer number!")};if(Number.isInteger(k)!=!0||k<0){console.error("Math.permutation: \""+JSON.stringify(k)+"\" is not a positive integer number!")};if(n<k){console.error("Math.combination: Illogical combination!")};return undefined}};Math.nCr=Math.combination;Math.combine=Math.combination;Math.cumulativecombination=function(n){if(Number.isInteger(n)==!0&&n>=0){let Total=0;for(let index=1;index<=n;index++){Total=Total+Math.combination(n,index)};return Total}else{console.error("Math.cumulativecombination: \""+JSON.stringify(n)+"\" is not a positive integer number!");return undefined}};Math.cumcombine=Math.cumulativecombination;Number.prototype.cumulativecombination=function(){return Math.cumulativecombination(this.valueOf())};Number.prototype.cumcombine=Number.prototype.cumulativecombination;Math.sort=function(){let List=[];let Method;if(Array.isArray(arguments[0])==!0){List=arguments[0];Method=arguments[1]}else{for(let index=0;index<(arguments.length-1);index++){List.push(arguments[index])};if(typeof arguments[arguments.length-1]=="number"){List.push(arguments[arguments.length-1])}else{Method=arguments[arguments.length-1]}};if(List.length==0){console.error("Math.sort: No input!");return undefined};let Invalid=!1;for(let index=0;index<List.length;index++){if(typeof List[index]!="number"){console.error("Math.sort: \""+JSON.stringify(List[index])+"\" is not a number!");Invalid=!0}};if(Invalid==!0){return undefined};let Queue=[];switch(Method){case "Ascending":case "ascending":case "LH":case "Normal":case "normal":case "":case undefined:while(List.length>1){let X=Math.min(...List);Queue.push(X);List.splice(List.indexOf(X),1)};Queue.push(List[0]);return Queue;break;case "Descending":case "descending":case "HL":case "Reverse":case "reverse":while(List.length>1){let X=Math.max(...List);Queue.push(X);List.splice(List.indexOf(X),1)};Queue.push(List[0]);return Queue;break;default:console.error("Math.sort: Invalid sort method \""+JSON.stringify(Method)+"\"!");return undefined;break}};Math.mean=function(){let List=[];if(Array.isArray(arguments[0])==!0){List=arguments[0]}else{for(let index=0;index<arguments.length;index++){List.push(arguments[index])}};if(List.length==0){console.error("Math.mean: No input!");return undefined};let Invalid=!1;for(let index=0;index<List.length;index++){if(typeof List[index]!="number"){console.error("Math.mean: \""+JSON.stringify(List[index])+"\" is not a number!");Invalid=!0}};if(Invalid==!0){return undefined};return(Math.addition(List)/List.length)};Math.average=Math.mean;Math.median=function(){let List=[];if(Array.isArray(arguments[0])==!0){List=arguments[0]}else{for(let index=0;index<arguments.length;index++){List.push(arguments[index])}};if(List.length==0){console.error("Math.median: No input!");return undefined};let Invalid=!1;for(let index=0;index<List.length;index++){if(typeof List[index]!="number"){console.error("Math.median: \""+JSON.stringify(List[index])+"\" is not a number!");Invalid=!0}};if(Invalid==!0){return undefined};List=Math.sort(List,"Ascending");switch(List.length%2){case 0:return Math.mean(List[List.length/2-1],List[List.length/2]);break;case 1:return List[List.length/2-0.5];break}};